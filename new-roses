#!/usr/bin/env bash
#
# author: daniel neemann (@zzzeyez)
#
# imports wallpapers from unsplash.com
#
# requires `imagemagick` and `jq`

#unsplashapi=""

wallpaper="/tmp/wallpaper.png"
artist_file="/tmp/wallpaperartist"
keywords_file="/tmp/new-roses-keywords"
default_keyword="roses"
config="${HOME}/.config/new-roses"
dummy="/tmp/dummy.png"

setup() {
	if [[ "$api" ]] ; then
		echo "$api" > "$config"
	fi
	if [[ -f "$config" ]] ; then
		unsplashapi="$(cat "$config")"
	fi
	if [[ -z "$unsplashapi" ]] ; then
		echo "no unsplash api... run this to apply one:"
		echo "new-rose -a your_api_key"
		echo "exiting.."
		exit
	fi
	# if no keyword, grab a random one
	if [[ -z "$keyword" ]] && [[ -f "$keywords_file" ]] ; then
		shuf="$(command -v shuf)"
		if [ -x "$shuf" ] ; then
			keyword="$(cat $keywords_file | shuf -n 1)"
		else
			# or use default
			keyword="$default_keyword"
		fi
	fi
}

getapi() {
	# grab a random number to select from top results
	entry="$((RANDOM%20))"
	unsplashurl="https://api.unsplash.com/search/photos?client_id=$unsplashapi&query=$keyword&per_page=20"
	searchjson=$(curl -s "$unsplashurl")
	image="$(echo "$searchjson" | \
		jq "{results} | .[] | .[$entry] | {urls} | .[] | {raw} | .[]" | tr -d '"')&w=1400&dpi=2"
	username="$(echo "$searchjson" | \
		jq ".results | .[$entry] .user .name" | tr -d '"')"
	userscreenname="$(echo "$searchjson" | \
		jq ".results | .[$entry] .user .username" | tr -d '"')"
	userurl="$(echo "$searchjson" | \
		jq ".results | .[$entry] .user .links .html" | tr -d '"')"
	#photourl="$(echo "$searchjson" | \
		#jq ".results | .[$entry] .links .html" | tr -d '"')"
	if [[ "$username" = "null" ]] ; then
		echo "no results found.  exiting.."
		exit
	fi
	echo "$username" > "$artist_file"
}

macwallpaper() {
	METHOD=$(sw_vers -productVersion | awk -F'.' '{ if ($1 < 10 || $2 < 9) \
	{ print "osascript" } else{ print "sqlite3"  } }')
	case $METHOD in
	osascript)
		osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"${1}\""
	;;
	sqlite3)
		current_path=$(sqlite3 -noheader -batch "${HOME}"/Library/Application\ Support/Dock/desktoppicture.db 'select value from data limit 1')
		if [[ "$current_path" != "$1" ]]; then
		sqlite3 "${HOME}"/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '${1}'" && killall Dock
	fi
	;;
	*)
		echo "error setting wallpaper" && exit 1
	;;
	esac
}

setwallpaper() {
	convert "$image" "$wallpaper"
	de="${XDG_CURRENT_DESKTOP}"
	os="$(uname)"
	# Fallback to using xprop.
	[[ -z "$de" ]] && type -p xprop >/dev/null 2>&1 && \
		de="$(xprop -root | awk '/KDE_SESSION_VERSION|^_MUFFIN|xfce4|xfce5/')"
		case "$de" in
		*"MUFFIN"* | *"Cinnamon"*) gsettings set org.cinnamon.desktop.background picture-uri "file://${wallpaper}" ;;
		*"MATE"*) gsettings set org.mate.background picture-filename "$wallpaper" ;;
		*"GNOME"*) gsettings set org.gnome.desktop.background picture-uri "file://${wallpaper}" ;;
		*"XFCE"*)
			xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitor0/image-path --set "$wallpaper" 2>/dev/null
			xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitor0/workspace0/last-image --set "$wallpaper" 2>/dev/null
		;;
		*)
			if [[ "$os" == "Darwin" ]]; then
				# `osascript` prevents using same file consecutively
				if [[ ! -e "$dummy" ]] ; then
					convert -size 5x5 xc:"#000000" "$dummy" 
				fi
				macwallpaper "$dummy"
				macwallpaper "$wallpaper"
			elif type -p swaybg >/dev/null; then
				swaybg -i "$wallpaper"
			elif type -p feh >/dev/null; then
				feh --bg-fill "$wallpaper"
			elif type -p nitrogen >/dev/null; then
				nitrogen --set-zoom-fill "$wallpaper"
			elif type -p bgs >/dev/null; then
				bgs "$wallpaper"
			elif type -p hsetroot >/dev/null; then
				hsetroot -fill "$wallpaper"
			elif type -p habak >/dev/null; then
				habak -mS "$wallpaper"
			else
				gsettings set org.gnome.desktop.background picture-uri "file://${wallpaper}"
			fi
			;;
		esac
	if [ -x "$notify" ]
	then
		notify-send -i "$wallpaper" -m "photo by $username via Unsplash.com"
	fi
	if [[ -z "$quietmodeon" ]]
	then
		echo "photo by $username ($userscreenname) via unsplash.com"
		echo "$userurl?utm_source=new-roses&utm_medium=referral"
		echo "keyword: $keyword"
	fi
}

save() {
	savedir="$1"
	savename="$(cat $artist_file | tr -cd "[:alnum:]\"\n")"
	savefile="$savedir/${savename// /}"
	if [[ -e $savefile.png ]] ; then
		i=2
		while [[ -e $savefile$i.png ]] 
		do
			(( i++ ))
		done
		savefile=$savefile$i
	fi
	cp "$wallpaper" "$savefile.png" &&
	if [[ -z "$quietmodeon" ]] ; then
		echo "$savefile.png saved"
	fi
	if [ -x "$notify" ]
	then
		notify-send -m "$savefile.png saved" -i "$savefile.png"	
	fi
}

help() {
	printf \
"usage: new-roses [OPTION] [SEARCHTERM]
      [-a] [-n] [-s ~/download/dir] [-q]
       
example: new-roses spring

optional arguments:
  -a 'your_api_key'       tell new-roses API key
                          from https://unsplash.com/developers
  -s '/path/to/dir/'	  save wallpaper to directory
  -n                      notify when finished (requires notify-send)
  -h                      display this help page and exit
  -q                      quiet mode (print nothing) \n"
}

flags() {
	while getopts a:s:qnh opt; do
		case $opt in
			a)
			api="$OPTARG"
			;;
			s)
			save "$OPTARG"
			exit
			;;
			q)
			quietmodeon="true"
			;;
			n)
			notify="$(which notify-send)"
			;;
			h)
			help
			exit
			;;
			*)
			help
			exit
			;;
		esac
	done
	# if no flags are provided do `new-roses [searchterm] [bgcolor]`
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ;
	then
		keyword="$1"	
		query="$(cat $keywords_file | grep $keyword)"
		if [[ -z "$query" ]] ; then
			echo "$keyword" >> "$keywords_file"
		fi
		unset query
	fi
}

if [ "$#" -ne 0 ]; then
	flags "$@"
	setup
	getapi
	setwallpaper
else
	setup
	getapi
	setwallpaper
fi

################
#    TO DO     #
################

# combine $artist_file and $keywords_file
